package com.apptinus.sagan.util;

import static org.junit.Assert.assertEquals;

import org.junit.Test;

public class BitopsTest {

  @Test
  public void testSet() {
    assertEquals(
        0b0000000000000000000000000000000000000000000000000000000000000001L,
        Bitops.set(0b0000000000000000000000000000000000000000000000000000000000000000L, 0));
    assertEquals(
        0b1000000000000000000000000000000000000000000000000000010000000000L,
        Bitops.set(0b0000000000000000000000000000000000000000000000000000010000000000L, 63));
    assertEquals(
        0b0000000000000000000000000000000000000000000000000000010000000001L,
        Bitops.set(0b0000000000000000000000000000000000000000000000000000010000000000L, 0));
    assertEquals(
        0b0000000000000000000000000000000000000000000000000000110000000000L,
        Bitops.set(0b0000000000000000000000000000000000000000000000000000010000000000L, 11));
  }

  @Test
  public void testUnset() {
    assertEquals(
        0b0000000000000000000000000000000000000000000000000000000000000000L,
        Bitops.unset(0b0000000000000000000000000000000000000000000000000000000000000001L, 0));
    assertEquals(
        0b0000000000000000000000000000000000000000000000000000010000000000L,
        Bitops.unset(0b1000000000000000000000000000000000000000000000000000010000000000L, 63));
    assertEquals(
        0b0000000000000000000000000000000000000000000000000000010000000000L,
        Bitops.unset(0b0000000000000000000000000000000000000000000000000000010000000001L, 0));
    assertEquals(
        0b0000000000000000000000000000000000000000000000000000010000000000L,
        Bitops.unset(0b0000000000000000000000000000000000000000000000000000110000000000L, 11));
  }

  @Test
  public void testSetBit() {
    assertEquals(
        0b0000000000000000000000000000000000000000000000000000000000000001L, Bitops.setBit(0));
    assertEquals(
      0b0000000000000000000000000000000000000000000000000000010000000000L, Bitops.setBit(10));
    assertEquals(
      0b1000000000000000000000000000000000000000000000000000000000000000L, Bitops.setBit(63));
  }

  @Test
  public void testUnsetBit() {
    assertEquals(
      0b1111111111111111111111111111111111111111111111111111111111111110L, Bitops.unsetBit(0));
    assertEquals(
      0b1111111111111111111111111111111111111111111111111111101111111111L, Bitops.unsetBit(10));
    assertEquals(
      0b0111111111111111111111111111111111111111111111111111111111111111L, Bitops.unsetBit(63));
  }

  @Test
  public void testIsSet() {
    assertEquals(
      true,
      Bitops.isSet(0b0000000000000000000000000000000000000000000000000000000000000001L, 0));
    assertEquals(
      true,
      Bitops.isSet(0b1000000000000000000000000000000000000000000000000000010000000000L, 63));
    assertEquals(
      true,
      Bitops.isSet(0b0000000000000000000000000000000000000000000000000000010000000001L, 0));
    assertEquals(
      true,
      Bitops.isSet(0b0000000000000000000000000000000000000000000000000000110000000000L, 11));
    assertEquals(
      false,
      Bitops.isSet(0b0000000000000000000000000000000000000000000000000000000000000001L, 2));
    assertEquals(
      false,
      Bitops.isSet(0b1000000000000000000000000000000000000000000000000000010000000000L, 0));
    assertEquals(
      false,
      Bitops.isSet(0b0000000000000000000000000000000000000000000000000000010000000001L, 40));
    assertEquals(
      false,
      Bitops.isSet(0b0000000000000000000000000000000000000000000000000000110000000000L, 63));
  }

  @Test
  public void testNext() {
    assertEquals(
        -1, Bitops.next(0b0000000000000000000000000000000000000000000000000000000000000000L));
    assertEquals(
        0, Bitops.next(0b0000000000000000000000000000000000000000000000000000000000000001L));
    assertEquals(
        63, Bitops.next(0b1000000000000000000000000000000000000000000000000000000000000000L));
    assertEquals(
        10, Bitops.next(0b0000000000000000000000000000000000000000000000000000010000000000L));
    assertEquals(
        0, Bitops.next(0b1111111111111111111111111111111111111111111111111111111111111111L));
    assertEquals(
        1, Bitops.next(0b1111111111111111111111111111111111111111111111111111111111111110L));
    assertEquals(
        10, Bitops.next(0b1111111111111111111111111111111111111111111111111111110000000000L));
  }
}
